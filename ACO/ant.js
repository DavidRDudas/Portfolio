class Ant{constructor(t,i,s,h){switch(this.x=t,this.y=i,this.type=s,this.colony=h,this.hasFood=!1,this.health=100,this.age=0,this.isDead=!1,this.path=[],this.pathLimit=100,this.isEnemy=!1,this.target=null,s){case"queen":this.speed=.5,this.pheromoneStrength=2,this.color="#FFD700",this.health=200,this.foodConsumption=.02,this.maxAge=1e4,this.canLayEggs=!0,this.eggLayingCooldown=0,this.eggLayingRate=30,this.eggLayingCost=2,this.canLayQueen=!0,this.queenLayingThreshold=500,this.nextQueenTimer=3e3;break;case"scout":this.speed=2,this.pheromoneStrength=2,this.color="#2196F3",this.explorationRate=1.5,this.sensorDistance=80,this.foodSensorRange=60,this.turnSpeed=.2,this.maxAge=2e3,this.foodConsumption=.008,this.canCollectFood=!1,this.canCarryDead=!0;break;case"forager":this.speed=1.8,this.pheromoneStrength=1.5,this.color="#4CAF50",this.explorationRate=.3,this.sensorDistance=50,this.foodSensorRange=30,this.turnSpeed=.15,this.maxAge=1500,this.foodConsumption=.01,this.canCollectFood=!0,this.canCarryDead=!0;break;case"warrior":this.speed=2.2,this.pheromoneStrength=.6,this.color="#F44336",this.explorationRate=.8,this.sensorDistance=40,this.maxAge=2500,this.foodConsumption=.02,this.damage=20,this.attackRange=15,this.patrolRadius=100,this.canCarryDead=!0,this.canCollectFood=!1;break;case"enemy":this.speed=h.enemySettings?.speed||1.5,this.color="#800000",this.health=h.enemySettings?.health||80,this.damage=h.enemySettings?.damage||15,this.attackRange=12,this.isEnemy=!0,this.turnSpeed=.1,this.foodConsumption=0,this.maxAge=1/0}this.direction=Math.random()*Math.PI*2,this.wanderAngle=0,this.wanderRadius=40,this.wanderDistance=80,this.wanderJitter=1.2,this.stuckTime=0,this.prevPositions=[],this.maxPrevPositions=100,this.carryingDeadAnt=null}update(t,i=1){if(this.isDead)return;if(this.age+=i,this.health-=this.foodConsumption*i,this.age>this.maxAge||this.health<=0)return void this.die();if(this.speed*=i,this.hasFood||this.carryingDeadAnt||this.checkForDeadAnts(),this.carryingDeadAnt)this.moveTowardsNest();else if(this.isEnemy)this.updateEnemy();else switch(this.type){case"scout":this.updateScout();break;case"forager":this.updateForager();break;case"warrior":this.updateWarrior();break;case"queen":this.updateQueen()}Math.hypot(this.x-this.colony.x,this.y-this.colony.y)<10&&this.returnToNest(),this.speed/=i}updateQueen(){this.eggLayingCooldown<=0&&this.colony.foodStock>=this.eggLayingCost&&(this.layEgg(),this.eggLayingCooldown=this.eggLayingRate),this.canLayQueen&&this.colony.foodStock>=this.queenLayingThreshold&&this.nextQueenTimer<=0&&(this.layQueen(),this.nextQueenTimer=3e3),this.eggLayingCooldown--,this.nextQueenTimer--}updateEnemy(){let t=null,i=300;if(colonies.forEach((s=>{s.ants.forEach((s=>{if(!s.isDead&&!s.isEnemy){const h=Math.hypot(this.x-s.x,this.y-s.y);h<i&&(i=h,t=s)}}))})),t){const s=Math.atan2(t.y-this.y,t.x-this.x),h=this.normalizeAngle(s-this.direction);this.direction+=Math.sign(h)*Math.min(Math.abs(h),this.turnSpeed),i<this.attackRange&&this.attack(t)}else Math.random()<.05&&(this.direction+=(Math.random()-.5)*Math.PI*.5);this.applyMovement()}updateWarrior(){const t=Math.hypot(this.x-this.colony.x,this.y-this.colony.y),i=this.colony.getPheromones(this.x,this.y).find((t=>"alarm"===t.type&&t.strength>.5));if(i)return this.direction=Math.atan2(i.y-this.y,i.x-this.x),void this.move();let s=null,h=this.sensorDistance;if(this.colony.ants.forEach((t=>{if(t.isEnemy&&!t.isDead){const i=Math.hypot(this.x-t.x,this.y-t.y);i<h&&(h=i,s=t)}})),s)if(h<this.attackRange)this.attack(s);else{const t=Math.atan2(s.y-this.y,s.x-this.x),i=.5*(Math.random()-.5);this.direction=t+i,this.move()}else{if(t>this.patrolRadius){const t=Math.atan2(this.colony.y-this.y,this.colony.x-this.x);this.direction=t+.3*(Math.random()-.5)}else Math.random()<.03&&(this.direction+=(Math.random()-.5)*Math.PI*.5);this.move()}}attack(t){t.health-=this.damage,t.lastAttackedByEnemy=this.isEnemy,t.health<=0&&(this.isEnemy?this.colony.addLog(`Enemy killed a ${t.type}!`,"#FF6B6B"):t.isEnemy&&this.colony.addLog("Warriors killed an enemy!","#90EE90"),t.die())}die(){if(this.isDead=!0,"queen"===this.type&&(this.colony.queenDead=!0,this.colony.addLog("The queen has died!","#FF0000")),this.lastAttackedByEnemy&&this.colony.addLog(`A ${this.type} was killed by an enemy!`,"#FF6B6B"),this.colony.deadAnts.push({x:this.x,y:this.y,type:this.type,timeOfDeath:this.colony.age}),this.lastAttackedByEnemy)for(let t=0;t<2*Math.PI;t+=Math.PI/8)for(let i=5;i<=40;i+=5){const s=this.x+Math.cos(t)*i,h=this.y+Math.sin(t)*i;this.colony.addPheromone(s,h,"alarm",5*(1-i/40))}}layEgg(){const t=["forager","warrior","scout"],i=t[Math.floor(Math.random()*t.length)];this.colony.addAnt(i),this.colony.addLog(`Queen laid egg: ${i}`,"#FFD700")}wander(){this.wanderAngle+=(Math.random()-.5)*this.wanderJitter;const t={x:Math.cos(this.direction)*this.wanderDistance,y:Math.sin(this.direction)*this.wanderDistance},i={x:Math.cos(this.wanderAngle)*this.wanderRadius,y:Math.sin(this.wanderAngle)*this.wanderRadius},s=t.x+i.x,h=t.y+i.y,e=Math.atan2(h,s);this.colony.debugMode&&this.drawWanderCircle(t,i);const o=this.normalizeAngle(e-this.direction);return this.direction+Math.sign(o)*Math.min(Math.abs(o),this.turnSpeed)}drawWanderCircle(t,i){if(!this.ctx)return;const s={x:this.x+t.x,y:this.y+t.y};this.ctx.beginPath(),this.ctx.arc(s.x,s.y,this.wanderRadius,0,2*Math.PI),this.ctx.strokeStyle="rgba(255,255,255,0.1)",this.ctx.stroke(),this.ctx.beginPath(),this.ctx.arc(s.x+i.x,s.y+i.y,2,0,2*Math.PI),this.ctx.fillStyle="rgba(255,255,255,0.5)",this.ctx.fill()}sense(t){const i=this.x+Math.cos(this.direction+t)*this.sensorDistance,s=this.y+Math.sin(this.direction+t)*this.sensorDistance;let h=0;if(this.hasFood){this.colony.getPheromones(i,s).forEach((t=>{"nest"===t.type&&(h+=3*t.strength)}))}else{this.colony.foodSources.forEach((t=>{if(t.amount>0){const e=Math.hypot(i-t.x,s-t.y);e<this.foodSensorRange&&(h+=15*Math.exp(-e/(this.foodSensorRange/2)))}}));const t=Math.atan2(this.colony.y-this.y,this.colony.x-this.x),e=Math.abs(this.normalizeAngle(this.direction-t))<Math.PI/2;this.colony.getPheromones(i,s).forEach((t=>{switch(t.type){case"food":h+=e?3*t.strength:.5*t.strength;break;case"scout":h+=2.5*t.strength}}))}return h}move(){if("scout"===this.type){const t=this.findNearestFood();if(t){if(Math.hypot(this.x-t.x,this.y-t.y)<this.foodSensorRange){this.markFoundFood(t);const i=Math.atan2(this.colony.y-this.y,this.colony.x-this.x),s=this.normalizeAngle(i-this.direction);this.direction+=Math.sign(s)*Math.min(Math.abs(s),this.turnSpeed)}else{const i=Math.atan2(t.y-this.y,t.x-this.x),s=this.normalizeAngle(i-this.direction);this.direction+=Math.sign(s)*Math.min(Math.abs(s),this.turnSpeed)}}else Math.random()<.1*this.explorationRate&&(this.direction+=(Math.random()-.5)*this.turnSpeed)}else if("forager"===this.type)if(this.hasFood){const t=Math.atan2(this.colony.y-this.y,this.colony.x-this.x),i=this.normalizeAngle(t-this.direction);this.direction+=Math.sign(i)*Math.min(Math.abs(i),this.turnSpeed),this.colony.addPheromone(this.x,this.y,"food",2*this.pheromoneStrength)}else{let t=0,i=0;[-1,-.5,-.25,0,.25,.5,1].forEach((s=>{const h=this.sense(s);h>t&&(t=h,i=s)})),t>.1?this.direction+=i*this.turnSpeed*1.2:Math.random()<.05*this.explorationRate&&(this.direction+=(Math.random()-.5)*this.turnSpeed),this.checkFoodInteraction(),this.applyMovement()}this.hasFood&&Math.hypot(this.x-this.colony.x,this.y-this.colony.y)<10&&this.returnToNest(),this.applyMovement(),this.carryingDeadAnt&&(this.carryingDeadAnt.x=this.x-5*Math.cos(this.direction),this.carryingDeadAnt.y=this.y-5*Math.sin(this.direction))}returnToNest(){if(Math.hypot(this.x-this.colony.x,this.y-this.colony.y)<10){if(this.hasFood)this.hasFood=!1,this.colony.foodStock+=1,this.health=Math.min(100,this.health+10);else if(this.carryingDeadAnt){const t=this.colony.deadAnts.indexOf(this.carryingDeadAnt);t>-1&&this.colony.deadAnts.splice(t,1),this.carryingDeadAnt=null,this.colony.addLog("Dead ant returned to nest","#8B4513")}this.direction=Math.atan2(this.y-this.colony.y,this.x-this.colony.x)+(Math.random()-.5)}}markFoundFood(t){for(let i=0;i<2*Math.PI;i+=Math.PI/8)for(let s=10;s<=30;s+=10){const h=t.x+Math.cos(i)*s,e=t.y+Math.sin(i)*s;this.colony.addPheromone(h,e,"scout",this.pheromoneStrength*(3-s/15))}}drawSensorPoint(t,i,s){if(!this.ctx)return;const h=this.colony.ctx;h.beginPath(),h.arc(t,i,3,0,2*Math.PI),h.fillStyle=`rgba(255, 255, 255, ${Math.min(1,s/2)})`,h.fill()}checkFoodInteraction(){this.canCollectFood&&!this.hasFood&&"scout"!==this.type&&this.colony.foodSources.forEach((t=>{if(t.amount>0){Math.hypot(this.x-t.x,this.y-t.y)<10&&(this.hasFood=!0,t.amount--,t.scale=.5+t.amount/100*.5,this.colony.addPheromone(this.x,this.y,"food",2*this.pheromoneStrength))}}))}normalizeAngle(t){for(;t>Math.PI;)t-=2*Math.PI;for(;t<-Math.PI;)t+=2*Math.PI;return t}draw(t){t.beginPath(),t.arc(this.x,this.y,3,0,2*Math.PI),t.fillStyle=this.color,t.fill(),t.beginPath(),t.moveTo(this.x,this.y),t.lineTo(this.x+6*Math.cos(this.direction),this.y+6*Math.sin(this.direction)),t.strokeStyle=this.color,t.stroke(),this.hasFood?(t.beginPath(),t.arc(this.x-5*Math.cos(this.direction),this.y-5*Math.sin(this.direction),2,0,2*Math.PI),t.fillStyle="#FFD700",t.fill()):this.carryingDeadAnt&&(t.beginPath(),t.arc(this.x-5*Math.cos(this.direction),this.y-5*Math.sin(this.direction),2,0,2*Math.PI),t.fillStyle="#444444",t.fill())}findNearestFood(){let t=null,i=this.foodSensorRange;return this.colony.foodSources.forEach((s=>{if(s.amount>0){const h=Math.hypot(this.x-s.x,this.y-s.y);h<i&&(i=h,t=s)}})),t}applyMovement(){const t=this.speed*(this.hasFood?.7:1);this.x+=Math.cos(this.direction)*t,this.y+=Math.sin(this.direction)*t,(this.x<0||this.x>this.colony.width)&&(this.direction=Math.PI-this.direction),(this.y<0||this.y>this.colony.height)&&(this.direction=-this.direction),this.hasFood?this.colony.addPheromone(this.x,this.y,"food",.7*this.pheromoneStrength):this.colony.addPheromone(this.x,this.y,"nest",.1*this.pheromoneStrength)}checkForDeadAnts(){if(this.canCarryDead&&!this.hasFood&&!this.carryingDeadAnt)for(let t of this.colony.deadAnts)if(!t.isBeingCarried){if(Math.hypot(this.x-t.x,this.y-t.y)<20){this.carryingDeadAnt=t,t.isBeingCarried=!0,this.colony.addPheromone(this.x,this.y,"dead",this.pheromoneStrength);const i=Math.atan2(this.colony.y-this.y,this.colony.x-this.x);this.direction=i;break}}}layQueen(){if(this.colony.foodStock>=this.queenLayingThreshold){this.colony.addAnt("queen");this.colony.foodStock-=this.queenLayingThreshold,this.colony.addLog("A new queen has been born!","#FFD700")}}moveTowardsNest(){const t=Math.atan2(this.colony.y-this.y,this.colony.x-this.x),i=this.normalizeAngle(t-this.direction);this.direction+=Math.sign(i)*Math.min(Math.abs(i),this.turnSpeed),this.colony.addPheromone(this.x,this.y,"dead",.5*this.pheromoneStrength),this.applyMovement()}updateScout(){const t=this.findNearestFood();if(t){if(Math.hypot(this.x-t.x,this.y-t.y)<this.foodSensorRange)return this.colony.addPheromone(this.x,this.y,"scout",2*this.pheromoneStrength),void this.moveTowardsNest()}Math.random()<.1*this.explorationRate&&(this.direction+=(Math.random()-.5)*this.turnSpeed),this.applyMovement()}updateForager(){if(this.hasFood)this.moveTowardsNest();else{let t=0,i=0;[-1.2,-.8,-.4,-.2,0,.2,.4,.8,1.2].forEach((s=>{const h=this.sense(s);h>t&&(t=h,i=s)})),t>.1?this.direction+=i*this.turnSpeed:Math.random()<.08*this.explorationRate&&(this.direction+=(Math.random()-.5)*this.turnSpeed*2),this.checkFoodInteraction(),this.applyMovement()}}}