let canvas,ctx,colonies=[],isRunning=!1,camera={x:0,y:0,scale:1,targetScale:1,dragging:!1,lastX:0,lastY:0},timeScale=1,frameCount=0,notifications=[];const NOTIFICATION_DURATION=5e3,WORLD_WIDTH=2400,WORLD_HEIGHT=1800,COLONY_COUNT=3;function init(){canvas=document.getElementById("antCanvas"),canvas.width=window.innerWidth,canvas.height=window.innerHeight,ctx=canvas.getContext("2d"),isRunning=!1,setupEventListeners(),setupStatsClickHandler(),resetSimulation(),animate(),setupLogModal()}function animate(){if(frameCount++,ctx.fillStyle="#111111",ctx.fillRect(0,0,canvas.width,canvas.height),camera.scale+=.1*(camera.targetScale-camera.scale),ctx.save(),ctx.translate(canvas.width/2,canvas.height/2),ctx.scale(camera.scale,camera.scale),ctx.translate(-canvas.width/2,-canvas.height/2),ctx.translate(camera.x,camera.y),ctx.strokeStyle="#333",ctx.strokeRect(0,0,2400,1800),isRunning){const t=Math.ceil(timeScale);for(let e=0;e<t;e++)colonies.forEach((e=>{e.isExtinct||e.update(ctx,timeScale/t)}))}colonies.forEach((t=>t.draw(ctx))),ctx.restore(),updateStats(),drawNotifications(),requestAnimationFrame(animate)}function setupEventListeners(){canvas.addEventListener("mousedown",(t=>{camera.dragging=!0,camera.lastX=t.clientX,camera.lastY=t.clientY})),canvas.addEventListener("mousemove",(t=>{camera.dragging&&(camera.x+=t.clientX-camera.lastX,camera.y+=t.clientY-camera.lastY,camera.lastX=t.clientX,camera.lastY=t.clientY)})),window.addEventListener("mouseup",(()=>{camera.dragging=!1})),canvas.addEventListener("wheel",(t=>{t.preventDefault(),camera.targetScale=Math.max(.5,Math.min(2,camera.targetScale+(t.deltaY>0?-.1:.1)))})),window.addEventListener("resize",(()=>{canvas.width=window.innerWidth,canvas.height=window.innerHeight})),document.getElementById("startBtn").addEventListener("click",(()=>{isRunning=!isRunning,document.getElementById("startBtn").textContent=isRunning?"Stop":"Start"})),document.getElementById("resetBtn").addEventListener("click",resetSimulation);const t=document.getElementById("timeSpeed"),e=document.getElementById("speedDisplay");t.addEventListener("input",(t=>{timeScale=parseFloat(t.target.value),e.textContent=`${timeScale.toFixed(1)}x`}))}function setupStatsClickHandler(){const t=document.getElementById("stats");console.log("Stats container found:",t),t?t.addEventListener("mousedown",(t=>{console.log("Stats container clicked");const e=t.target.closest(".colony-stats");if(e){e.style.backgroundColor="rgba(255, 255, 255, 0.2)",console.log("Colony stats clicked:",e.dataset.colonyIndex);const t=parseInt(e.dataset.colonyIndex);!isNaN(t)&&colonies[t]&&showColonyLogs(colonies[t],t),setTimeout((()=>{e.style.backgroundColor=""}),200)}})):console.error("Stats container not found!")}function getColonyColor(t){const e=["#4CAF50","#2196F3","#F44336","#9C27B0","#FF9800","#00BCD4","#FFEB3B","#795548","#607D8B","#E91E63"];if(t>=e.length){return`hsl(${137.508*t%360}, ${70+20*Math.random()}%, ${45+10*Math.random()}%)`}return e[t]}function updateStats(){if(frameCount%10!=0)return;const t=document.getElementById("stats");t.children.length!==colonies.length&&(t.innerHTML=colonies.map(((t,e)=>`\n            <div class="colony-stats" data-colony-index="${e}" style="color: ${getColonyColor(e)}">\n                <div class="colony-header">Colony ${e+1}</div>\n                <div class="stat-row age"></div>\n                <div class="stat-row food"></div>\n                <div class="stat-row living"></div>\n                <div class="stat-row dead"></div>\n                <div class="stat-row born"></div>\n                <div class="stat-row enemies"></div>\n                <div class="extinct-warning" style="display: none;">EXTINCT</div>\n                <div class="view-logs-hint">Click to view logs</div>\n            </div>\n        `)).join("")),colonies.forEach(((e,n)=>{const a=t.children[n];if(!a)return;const o=e.ants.filter((t=>!t.isDead&&!t.isEnemy)).length,s=e.ants.filter((t=>!t.isDead&&t.isEnemy)).length,i=e.deadAnts.length,c=e.antsBorn||0,l=Math.floor(e.age/60),r=Math.floor(l/60),d=l%60;a.querySelector(".age").textContent=`Age: ${r}m ${d}s`,a.querySelector(".food").textContent=`Food Stock: ${Math.floor(e.foodStock)}`,a.querySelector(".living").textContent=`Living Ants: ${o}`,a.querySelector(".dead").textContent=`Dead Ants: ${i}`,a.querySelector(".born").textContent=`Total Born: ${c}`,a.querySelector(".enemies").textContent=`Active Enemies: ${s}`;a.querySelector(".extinct-warning").style.display=e.isExtinct?"block":"none"}))}function getSettings(){return{colonyCount:parseInt(document.getElementById("colonyCount").value),startingFood:parseInt(document.getElementById("startingFood").value),population:{scout:parseInt(document.getElementById("scoutCount").value),forager:parseInt(document.getElementById("foragerCount").value),warrior:parseInt(document.getElementById("warriorCount").value)},food:{count:parseInt(document.getElementById("foodCount").value),amount:parseInt(document.getElementById("foodAmount").value),spawnRate:parseInt(document.getElementById("foodSpawnRate").value),maxSources:parseInt(document.getElementById("maxFoodSources").value)},enemy:{enabled:document.getElementById("enableEnemies").checked,spawnRate:parseInt(document.getElementById("enemySpawnRate").value),speed:parseFloat(document.getElementById("enemySpeed").value),damage:parseInt(document.getElementById("enemyDamage").value),health:parseInt(document.getElementById("enemyHealth").value)}}}function resetSimulation(){isRunning=!1,document.getElementById("startBtn").textContent="Start",colonies=[];const t=getSettings();for(let e=0;e<t.colonyCount;e++){const n=new Colony(2400*(.2+.6*Math.random()),1800*(.2+.6*Math.random()),2400,1800,getColonyColor(e));n.foodStock=t.startingFood,n.initializeWithSettings(t),Object.entries(t.population).forEach((([t,e])=>{for(let a=0;a<e;a++)n.addAnt(t)})),colonies.push(n)}camera.x=(canvas.width-2400)/2,camera.y=(canvas.height-1800)/2,camera.targetScale=Math.min(canvas.width/2400*.8,canvas.height/1800*.8),camera.scale=camera.targetScale}function setupLogModal(){const t=document.getElementById("logModal");document.getElementsByClassName("close")[0].addEventListener("click",(e=>{e.preventDefault(),e.stopPropagation(),t.style.display="none"})),window.addEventListener("click",(e=>{e.target===t&&(t.style.display="none")}))}function showColonyLogs(t,e){const n=document.getElementById("logModal"),a=document.getElementById("modalTitle"),o=document.getElementById("modalLogs");o.innerHTML="",a.textContent=`Colony ${e+1} Logs`,a.style.color=getColonyColor(e);const s=[...t.logs].reverse().map((t=>{const e=document.createElement("div");return e.className="log-entry",e.style.color=t.color,e.textContent=t.message,e}));o.append(...s),n.style.display="block",n.style.zIndex="10000"}function addNotification(t,e="#fff"){if(!isRunning)return;const n={message:t,color:e,timestamp:Date.now()};notifications.push(n),setTimeout((()=>{notifications=notifications.filter((t=>t!==n))}),5e3)}function drawNotifications(){if(!isRunning)return void(notifications=[]);ctx.save(),notifications.forEach(((t,e)=>{const n=Date.now()-t.timestamp,a=Math.min(1,Math.min(n/500,(5e3-n)/500));ctx.globalAlpha=a,ctx.font="14px Arial",ctx.textAlign="center";const o=ctx.measureText(t.message).width;ctx.fillStyle="rgba(0, 0, 0, 0.5)",ctx.fillRect(canvas.width/2-o/2-10,25+20*e,o+20,20),ctx.fillStyle=t.color,ctx.fillText(t.message,canvas.width/2,40+20*e)})),ctx.restore()}window.addEventListener("load",init);