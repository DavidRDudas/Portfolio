class PheromoneSystem{constructor(t,i,s){this.width=t,this.height=i,this.gridSize=8,this.grid={},this.evaporationRate={food:.95,nest:.96,scout:.93,alarm:.9},this.diffusionRate=.02,this.maxStrength=2.5,this.minimumStrength=.15,this.offscreenCanvas=document.createElement("canvas"),this.offscreenCanvas.width=t,this.offscreenCanvas.height=i,this.offscreenCtx=this.offscreenCanvas.getContext("2d",{alpha:!0}),this.lastUpdate={},this.updateInterval=5,this.frameCount=0,this.colonyColor=s}add(t,i,s,h){const e=this.getGridKey(t,i);this.grid[e]||(this.grid[e]={food:0,nest:0,scout:0,alarm:0}),"alarm"===s&&(h*=2);const o=this.grid[e][s]||0;this.grid[e][s]=Math.min(this.maxStrength,o+h*(1-o/this.maxStrength));for(let e=-1;e<=1;e++)for(let o=-1;o<=1;o++){if(0===e&&0===o)continue;const r=Math.hypot(e,o);if(r<=1){const a=this.getGridKey(t+e*this.gridSize,i+o*this.gridSize);this.grid[a]||(this.grid[a]={food:0,nest:0,scout:0,alarm:0});const n=h*(1-r/1)*.5;this.grid[a][s]=Math.min(this.maxStrength,(this.grid[a][s]||0)+n)}}}update(){const t={};Object.entries(this.grid).forEach((([i,s])=>{const[h,e]=i.split(",").map(Number);let o=s.food*this.evaporationRate.food,r=s.nest*this.evaporationRate.nest,a=s.scout*this.evaporationRate.scout,n=s.alarm*this.evaporationRate.alarm;if(o>this.minimumStrength||r>this.minimumStrength||a>this.minimumStrength||n>this.minimumStrength){[`${h-1},${e}`,`${h+1},${e}`,`${h},${e-1}`,`${h},${e+1}`].forEach((t=>{this.grid[t]&&(o+=this.grid[t].food*this.diffusionRate,r+=this.grid[t].nest*this.diffusionRate,a+=this.grid[t].scout*this.diffusionRate,n+=this.grid[t].alarm*this.diffusionRate)})),t[i]={food:o>this.minimumStrength?Math.min(this.maxStrength,o):0,nest:r>this.minimumStrength?Math.min(this.maxStrength,r):0,scout:a>this.minimumStrength?Math.min(this.maxStrength,a):0,alarm:n>this.minimumStrength?Math.min(this.maxStrength,n):0}}})),this.grid=t}draw(t){if(this.frameCount++,this.frameCount%this.updateInterval==0){this.offscreenCtx.clearRect(0,0,this.width,this.height);const t={food:[],scout:[],nest:[],alarm:[]};Object.entries(this.grid).forEach((([i,s])=>{const[h,e]=i.split(",").map((t=>t*this.gridSize));["food","scout","nest","alarm"].forEach((i=>{s[i]>this.minimumStrength&&t[i].push({x:h+this.gridSize/2,y:e+this.gridSize/2,intensity:.4*Math.min(1,s[i]/this.maxStrength)})}))})),this.offscreenCtx.globalAlpha=.3;const i=document.getElementById("colonyColoredPheromones").checked?{food:this.adjustColor(this.colonyColor,1.2),scout:this.adjustColor(this.colonyColor,.8),nest:this.adjustColor(this.colonyColor,1),alarm:"rgba(255, 0, 0, 1)"}:{food:"rgba(255, 215, 0, 1)",scout:"rgba(0, 255, 0, 1)",nest:"rgba(135, 206, 235, 1)",alarm:"rgba(255, 0, 0, 1)"};Object.entries(t).forEach((([t,s])=>{0!==s.length&&(this.offscreenCtx.fillStyle=i[t],s.forEach((t=>{this.offscreenCtx.beginPath(),this.offscreenCtx.arc(t.x,t.y,1.5*this.gridSize*t.intensity,0,2*Math.PI),this.offscreenCtx.fill()})))})),this.offscreenCtx.globalAlpha=1}t.globalAlpha=.3,t.drawImage(this.offscreenCanvas,0,0),t.globalAlpha=1}adjustColor(t,i){let s=parseInt(t.slice(1,3),16),h=parseInt(t.slice(3,5),16),e=parseInt(t.slice(5,7),16);return s=Math.min(255,Math.floor(s*i)),h=Math.min(255,Math.floor(h*i)),e=Math.min(255,Math.floor(e*i)),`rgba(${s}, ${h}, ${e}, 1)`}getNearby(t,i,s=20){this.getGridKey(t,i);const h=Math.ceil(s/this.gridSize),e=[];for(let o=-h;o<=h;o++)for(let r=-h;r<=h;r++){const h=`${Math.floor(t/this.gridSize)+o},${Math.floor(i/this.gridSize)+r}`;if(this.grid[h]){const a=(Math.floor(t/this.gridSize)+o)*this.gridSize,n=(Math.floor(i/this.gridSize)+r)*this.gridSize,d=Math.hypot(a-t,n-i);if(d<=s){const t=1-d/s;this.grid[h].food>.05&&e.push({x:a,y:n,type:"food",strength:this.grid[h].food*t}),this.grid[h].nest>.05&&e.push({x:a,y:n,type:"nest",strength:this.grid[h].nest*t})}}}return e}getGridKey(t,i){return`${Math.floor(t/this.gridSize)},${Math.floor(i/this.gridSize)}`}}