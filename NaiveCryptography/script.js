class VisualGridCipher{constructor(e=32,t=25,n=3,i=!1){this.gridSize=e,this.cellSize=t,this.gridGap=n,this.isDecodeGrid=i,this.grid=Array(e*e).fill(0),this.activeNodes=new Set,this.colors={weak:"#ff7f0e",medium:"#2ca02c",strong:"#1f77b4",super:"#9467bd",ultra:"#e377c2",mega:"#bcbd22",hyper:"#17becf",max:"#7f7f7f"},this.rotations=[0,45,90,135,180,225,270,315],this.cellProperties=new Map,i||this.initializeGrid()}initializeGrid(e="gridContainer"){const t=document.getElementById(e);t&&(t.innerHTML="");const n=document.createElement("div");n.style.display="grid",n.style.gridTemplateColumns=`repeat(${this.gridSize}, ${this.cellSize}px)`,n.style.gap=`${this.gridGap}px`,n.style.padding="20px",n.style.backgroundColor="var(--surface-color)",n.style.borderRadius="8px",n.style.margin="20px auto",n.style.maxWidth="fit-content",n.style.boxShadow="0 2px 8px rgba(0,0,0,0.1)";for(let e=0;e<this.gridSize*this.gridSize;e++){const t=document.createElement("div");t.id=`${this.isDecodeGrid?"decode":"cell"}-${e}`,t.style.width=`${this.cellSize}px`,t.style.height=`${this.cellSize}px`,t.style.backgroundColor="var(--background-color)",t.style.border="1px solid var(--border-color)",t.style.borderRadius="4px",t.style.transition="all 0.3s ease",t.style.cursor=this.isDecodeGrid?"default":"pointer",n.appendChild(t)}t.appendChild(n),this.isDecodeGrid||this.startGridAnimation()}getRandomCell(){return Math.floor(crypto.getRandomValues(new Uint8Array(1))[0]*this.gridSize*this.gridSize/256)}getRandomColor(){const e=Object.values(this.colors);return e[Math.floor(crypto.getRandomValues(new Uint8Array(1))[0]*e.length/256)]}getRandomRotation(){return this.rotations[Math.floor(crypto.getRandomValues(new Uint8Array(1))[0]*this.rotations.length/256)]}getRandomIntensity(){return 40+Math.floor(60*crypto.getRandomValues(new Uint8Array(1))[0]/256)}updateCell(e,t=!0){const n=document.getElementById(`cell-${e}`);if(t){const t=this.getRandomColor(),i=this.getRandomRotation(),r=this.getRandomIntensity();n.style.backgroundColor=t,n.style.transform=`rotate(${i}deg)`,n.style.opacity=r/100,this.cellProperties.set(e,{color:t,rotation:i,intensity:r}),this.activeNodes.add(e)}else n.style.backgroundColor="#fff",n.style.transform="rotate(0deg)",n.style.opacity="1",this.cellProperties.delete(e),this.activeNodes.delete(e)}startGridAnimation(){setInterval((()=>{const e=this.getRandomCell();if(this.updateCell(e),this.activeNodes.size>2*this.gridSize){const e=Array.from(this.activeNodes),t=e[Math.floor(Math.random()*e.length)];this.updateCell(t,!1)}else if(this.activeNodes.size<this.gridSize/2){const e=this.getRandomCell();this.updateCell(e)}this.grid=Array(this.gridSize*this.gridSize).fill(0),this.activeNodes.forEach((e=>{this.grid[e]=1}))}),250)}async encrypt(e,t=!1){try{t&&(this.appendDebug("=== Starting Encryption Process ==="),this.appendDebug(`Input text length: ${e.length} characters`),this.appendDebug(`Active nodes: ${this.activeNodes.size}`));const n=this.analyzeGridPattern();t&&(this.appendDebug(`Grid Pattern Strength: ${n.strength}%`),this.appendDebug("Encryption iterations: "+(15e4+75e3*n.strength)));const i=Array.from(this.activeNodes);t&&this.appendDebug(`Creating encryption key from ${i.length} active nodes`);const r=new Uint8Array(64);i.forEach(((e,t)=>{if(t<64){const n=this.cellProperties.get(e),i=this.getColorValue(n.color);r[t]=(e*i*17+13*n.rotation+11*n.intensity+7*Math.floor(e/this.gridSize)+e%this.gridSize*5)%256}})),t&&this.appendDebug("Generating encryption parameters...");const o=new TextEncoder,a=o.encode(e),d=await crypto.subtle.importKey("raw",r,"PBKDF2",!1,["deriveBits","deriveKey"]),s=crypto.getRandomValues(new Uint8Array(16)),l=crypto.getRandomValues(new Uint8Array(12));t&&this.appendDebug("Deriving final encryption key...");const c=await crypto.subtle.deriveKey({name:"PBKDF2",salt:s,iterations:15e4+75e3*n.strength,hash:"SHA-256"},d,{name:"AES-GCM",length:256},!1,["encrypt"]);t&&this.appendDebug("Performing encryption...");const u=await crypto.subtle.encrypt({name:"AES-GCM",iv:l,additionalData:o.encode(n.pattern)},c,a);t&&this.appendDebug("Preparing final encrypted output...");const g=document.getElementById("includeGridData").checked,p={pattern:n.pattern,strength:n.strength,nodeCount:this.activeNodes.size,gridSize:this.gridSize};g&&(p.activeNodes=Array.from(this.activeNodes).map((e=>{const t=this.cellProperties.get(e),n=document.getElementById(`cell-${e}`);return{position:e,color:t.color,rotation:t.rotation,intensity:t.intensity,backgroundColor:n.style.backgroundColor,transform:n.style.transform,opacity:n.style.opacity}})));const h=JSON.stringify({salt:btoa(String.fromCharCode(...s)),iv:btoa(String.fromCharCode(...l)),data:btoa(String.fromCharCode(...new Uint8Array(u))),gridState:btoa(JSON.stringify(p))});return t&&(this.appendDebug("=== Encryption Complete ==="),this.appendDebug(`Output length: ${h.length} characters`)),h}catch(e){throw this.appendDebug(`ERROR: ${e.message}`),e}}analyzeGridPattern(){const e=Array.from(this.activeNodes),t=Math.min(100,e.length/this.gridSize*100),n=this.calculateDistribution(e),i=this.calculateComplexity(e),r=e.map((e=>{const t=this.cellProperties.get(e);return`${e}:${t.color}:${t.rotation}:${t.intensity}`})).join(",");return{strength:Math.min(100,Math.floor(.4*t+.3*n+.3*i)),pattern:r}}calculateDistribution(e){const t=[0,0,0,0],n=this.gridSize/2;e.forEach((e=>{const i=e%this.gridSize,r=Math.floor(e/this.gridSize);t[(i>=n?1:0)+(r>=n?2:0)]++}));const i=e.length/4,r=t.reduce(((e,t)=>e+Math.abs(t-i)),0);return Math.max(0,100-10*r)}calculateComplexity(e){if(e.length<2)return 0;let t=[];for(let n=0;n<e.length-1;n++)for(let i=n+1;i<e.length;i++){const r=e[n],o=e[i],a=r%this.gridSize,d=Math.floor(r/this.gridSize),s=o%this.gridSize,l=Math.floor(o/this.gridSize);t.push(Math.sqrt(Math.pow(s-a,2)+Math.pow(l-d,2)))}return new Set(t.map((e=>e.toFixed(2)))).size/t.length*100}getNodeColor(e){return document.getElementById(`cell-${e}`).style.backgroundColor}getColorValue(e){return Object.values(this.colors).indexOf(e)+1}async decrypt(e){try{const t=JSON.parse(e),n=JSON.parse(atob(t.gridState));console.log("Decryption pattern:",n),console.log("Decryption iterations:",15e4+75e3*n.strength);const i=n.pattern.split(",").map((e=>{const[t,n,i,r]=e.split(":");return{pos:parseInt(t),color:n,rotation:parseInt(i),intensity:parseInt(r)}})),r=new Uint8Array(64);i.forEach(((e,t)=>{if(t<64){const n=this.getColorValue(e.color);r[t]=(e.pos*n*17+13*e.rotation+11*e.intensity+7*Math.floor(e.pos/this.gridSize)+e.pos%this.gridSize*5)%256}}));const o=Uint8Array.from(atob(t.salt),(e=>e.charCodeAt(0))),a=Uint8Array.from(atob(t.iv),(e=>e.charCodeAt(0))),d=Uint8Array.from(atob(t.data),(e=>e.charCodeAt(0))),s=await crypto.subtle.importKey("raw",r,"PBKDF2",!1,["deriveBits","deriveKey"]),l=await crypto.subtle.deriveKey({name:"PBKDF2",salt:o,iterations:15e4+75e3*n.strength,hash:"SHA-256"},s,{name:"AES-GCM",length:256},!1,["decrypt"]),c=await crypto.subtle.decrypt({name:"AES-GCM",iv:a,additionalData:(new TextEncoder).encode(n.pattern)},l,d);return(new TextDecoder).decode(c)}catch(e){throw e}}appendDebug(e){const t=document.getElementById("debugOutput");if(t){const n=(new Date).toLocaleTimeString();t.value+=`[${n}] ${e}\n`,t.scrollTop=t.scrollHeight}console.log(e)}}class SecureVisualGridCipher extends VisualGridCipher{async encrypt(e,t=!1){try{t&&this.appendDebug("=== Starting Secure Encryption Process ===");const n=await crypto.subtle.generateKey({name:"AES-GCM",length:256},!0,["encrypt"]),i=crypto.getRandomValues(new Uint8Array(32)),r=crypto.getRandomValues(new Uint8Array(12)),o=this.analyzeGridPattern(),a=(new TextEncoder).encode(o.pattern),d=(new TextEncoder).encode(e),s=await crypto.subtle.encrypt({name:"AES-GCM",iv:r,additionalData:a,tagLength:128},n,d),l=await crypto.subtle.exportKey("raw",n),c=document.getElementById("includeGridData").checked,u={strength:o.strength,nodeCount:this.activeNodes.size,gridSize:this.gridSize};c&&(u.pattern=o.pattern,u.activeNodes=Array.from(this.activeNodes).map((e=>({position:e,...this.cellProperties.get(e)}))));const g=JSON.stringify({version:"2.0",salt:btoa(String.fromCharCode(...i)),iv:btoa(String.fromCharCode(...r)),key:btoa(String.fromCharCode(...new Uint8Array(l))),data:btoa(String.fromCharCode(...new Uint8Array(s))),gridState:btoa(JSON.stringify(u))});return t&&this.appendDebug("=== Encryption Complete ==="),g}catch(e){throw this.appendDebug(`ERROR: ${e.message}`),e}}async decrypt(e){try{const t=JSON.parse(e),n=(Uint8Array.from(atob(t.salt),(e=>e.charCodeAt(0))),Uint8Array.from(atob(t.iv),(e=>e.charCodeAt(0)))),i=Uint8Array.from(atob(t.key),(e=>e.charCodeAt(0))),r=Uint8Array.from(atob(t.data),(e=>e.charCodeAt(0))),o=JSON.parse(atob(t.gridState)),a=await crypto.subtle.importKey("raw",i,"AES-GCM",!1,["decrypt"]),d=o.pattern?(new TextEncoder).encode(o.pattern):new Uint8Array,s=await crypto.subtle.decrypt({name:"AES-GCM",iv:n,additionalData:d,tagLength:128},a,r);return(new TextDecoder).decode(s)}catch(e){throw new Error("Decryption failed: Invalid data or tampering detected")}}}const secureCipher=new SecureVisualGridCipher(32);async function encodeText(){const e=document.getElementById("inputText").value;if(e)try{const t=visualCipher.analyzeGridPattern();console.log("Current grid size:",visualCipher.gridSize),appendDebug(`Using grid size: ${visualCipher.gridSize}x${visualCipher.gridSize}`);document.getElementById("gridStatus").textContent=`Encryption Pattern Strength: ${t.strength}% (${visualCipher.activeNodes.size} active nodes) - Grid: ${visualCipher.gridSize}x${visualCipher.gridSize}`;const n=document.getElementById("showVisualization").checked,i=await visualCipher.encrypt(e,n);document.getElementById("encodedOutput").value=i,showToast("Text encoded successfully!")}catch(e){showToast("Error encoding text: "+e.message),console.error(e)}else showToast("Please enter text to encode")}async function decodeText(){const e=document.getElementById("encodedInput").value.trim(),t=document.getElementById("gridContainer2"),n=document.getElementById("gridStatus2");if(t.style.display="none",n.textContent="",e)try{const i=JSON.parse(e),r=JSON.parse(atob(i.gridState));if(n.textContent=`Encryption Pattern Strength: ${r.strength}% (${r.nodeCount} active nodes) - Grid: ${r.gridSize}x${r.gridSize}`,r.activeNodes){t.innerHTML="";const e=document.createElement("div");e.style.display="grid",e.style.gridTemplateColumns=`repeat(${r.gridSize}, ${visualCipher.cellSize}px)`,e.style.gap=`${visualCipher.gridGap}px`,e.style.padding="20px",e.style.backgroundColor="var(--surface-color)",e.style.borderRadius="8px",e.style.margin="20px auto",e.style.maxWidth="fit-content",e.style.boxShadow="0 2px 8px rgba(0,0,0,0.1)";for(let t=0;t<r.gridSize*r.gridSize;t++){const n=document.createElement("div");n.id=`decode-cell-${t}`,n.style.width=`${visualCipher.cellSize}px`,n.style.height=`${visualCipher.cellSize}px`,n.style.backgroundColor="var(--background-color)",n.style.border="1px solid var(--border-color)",n.style.borderRadius="4px",n.style.transition="all 0.3s ease",e.appendChild(n)}t.appendChild(e),r.activeNodes.forEach((e=>{const t=document.getElementById(`decode-cell-${e.position}`);t&&(t.style.backgroundColor=e.backgroundColor,t.style.transform=e.transform,t.style.opacity=e.opacity)})),t.style.display="block"}else t.style.display="none",n.textContent+=" (Grid visualization data not included)";const o=await visualCipher.decrypt(e);document.getElementById("decodedOutput").value=o,showToast("Text decoded successfully!")}catch(e){t.style.display="none",n.textContent="",showToast("Error decoding text: "+e.message),console.error("Decoding error:",e)}else showToast("Please enter the encoded text")}function showToast(e){const t=document.getElementById("toast");t.textContent=e,t.className="show",setTimeout((()=>t.className=""),3e3)}function copyToClipboard(e){document.getElementById(e).select(),document.execCommand("copy"),showToast("Copied to clipboard!")}function clearFields(e){"encode"===e?(document.getElementById("inputText").value="",document.getElementById("encodedOutput").value="",document.getElementById("encodeCharCount").textContent="0"):(document.getElementById("encodedInput").value="",document.getElementById("decodedOutput").value="",document.getElementById("decodeCharCount").textContent="0",document.getElementById("decodedCharCount").textContent="0",document.getElementById("gridContainer2").style.display="none",document.getElementById("gridStatus2").textContent=""),showToast("Fields cleared")}function appendDebug(e){const t=document.getElementById("debugOutput");if(t){const n=(new Date).toLocaleTimeString();t.value+=`[${n}] ${e}\n`,t.scrollTop=t.scrollHeight}console.log(e)}function initializeGridControls(){const e=document.getElementById("gridSize"),t=document.getElementById("gridSizeValue");e.addEventListener("input",(()=>{t.textContent=`${e.value} x ${e.value}`}));const n=document.getElementById("cellSize"),i=document.getElementById("cellSizeValue");n.addEventListener("input",(()=>{i.textContent=`${n.value}px`}));const r=document.getElementById("gridGap"),o=document.getElementById("gridGapValue");r.addEventListener("input",(()=>{o.textContent=`${r.value}px`}))}function applyGridSettings(){const e=parseInt(document.getElementById("gridSize").value),t=parseInt(document.getElementById("cellSize").value),n=parseInt(document.getElementById("gridGap").value);visualCipher.gridSize=e,visualCipher.cellSize=t,visualCipher.gridGap=n,visualCipher2.gridSize=e,visualCipher2.cellSize=t,visualCipher2.gridGap=n,document.getElementById("gridContainer").innerHTML="",document.getElementById("gridContainer2").innerHTML="",visualCipher.initializeGrid("gridContainer");const i=document.getElementById("gridContainer2");i&&(i.style.display="none"),showToast("Grid settings updated successfully!")}document.querySelectorAll(".tab-btn").forEach((e=>{e.addEventListener("click",(()=>{document.querySelectorAll(".tab-btn").forEach((e=>e.classList.remove("active"))),document.querySelectorAll(".tab-pane").forEach((e=>e.classList.remove("active"))),e.classList.add("active"),document.getElementById(e.dataset.tab).classList.add("active")}))})),document.getElementById("themeToggle").addEventListener("change",(e=>{document.body.setAttribute("data-theme",e.target.checked?"dark":"light")})),document.getElementById("inputText").addEventListener("input",(e=>{document.getElementById("encodeCharCount").textContent=e.target.value.length})),document.addEventListener("DOMContentLoaded",(()=>{initializeGridControls(),window.visualCipher=new VisualGridCipher(32,25,3,!1),visualCipher.initializeGrid("gridContainer"),window.visualCipher2=new VisualGridCipher(32,25,3,!0);const e=document.getElementById("gridContainer2");e&&(e.style.display="none"),document.getElementById("inputText").addEventListener("input",(e=>{document.getElementById("encodeCharCount").textContent=e.target.value.length})),document.getElementById("encodedInput").addEventListener("input",(e=>{document.getElementById("decodeCharCount").textContent=e.target.value.length}));document.getElementById("decodedOutput").addEventListener("input",(e=>{document.getElementById("decodedCharCount").textContent=e.target.value.length}))}));