class ParticleSystem{constructor(t,s={}){this.canvas=t,this.ctx=t.getContext("2d"),this.particles=[],this.options={gravity:s.gravity||500,particleSize:s.particleSize||5,elasticity:s.elasticity||.7,maxParticles:s.maxParticles||5e3,boundaryType:s.boundaryType||"solid",chargeStrength:s.chargeStrength||0,defaultMass:s.defaultMass||10,simulationType:"default",precision:s.precision||1,gravitationalConstant:1,orbitalSpeedMultiplier:1,sunRadius:15,sunMass:1e3,celestialPreset:"default"},this.grid=new SpatialGrid(t.width,t.height,50),this.particlesPerClick=5,this.initialVelocity=100,this.frameCount=0,this.lastFpsUpdate=performance.now(),this.fps=0,this.celestialPresets={default:{radius:15,mass:1e3,color:"#FFD700",gravity:1,eventHorizonRadius:0},blackhole:{radius:8,mass:8e3,color:"#000000",gravity:4,eventHorizonRadius:25},neutron:{radius:5,mass:4e3,color:"#00FFFF",gravity:2,eventHorizonRadius:10},dwarf:{radius:10,mass:500,color:"#FF6B6B",gravity:.4,eventHorizonRadius:0},supergiant:{radius:40,mass:3e3,color:"#FF4500",gravity:1.2,eventHorizonRadius:0}},this.timeScale=1e3,this.mouseX=0,this.mouseY=0,this.hoveredParticle=null,t.addEventListener("mousemove",(s=>{const i=t.getBoundingClientRect(),a=t.width/i.width,e=t.height/i.height;this.mouseX=(s.clientX-i.left)*a,this.mouseY=(s.clientY-i.top)*e,this.hoveredParticle=this.findHoveredParticle()})),this.trajectoryPoints=new Map,this.maxTrajectoryPoints=200,this.predictSteps=500}addParticle(t,s,i=0,a=0){if(this.particles.length>=this.options.maxParticles)return null;if("solarSystem"!==this.options.simulationType){const e=new Particle(t,s,i,a,this.options.particleSize,this.options.defaultMass);return"electricField"===this.options.simulationType&&(e.charge=Math.random()<.5?-1:1),this.particles.push(e),this.grid.addParticle(e),e}{const e=this.particles.find((t=>t.isSun));if(e){const r=t-e.x,h=s-e.y,o=Math.sqrt(r*r+h*h),n=new Particle(t,s,i,a,3,10),c=this.options.gravitationalConstant,l=Math.sqrt(c*e.mass/o),d=Math.atan2(h,r)+Math.PI/2,p=.95;return n.vx=Math.cos(d)*l*p*this.options.orbitalSpeedMultiplier,n.vy=Math.sin(d)*l*p*this.options.orbitalSpeedMultiplier,this.particles.push(n),this.grid.addParticle(n),n}}}applyForces(t,s){switch(this.options.simulationType){case"solarSystem":this.applyCentralGravity(t,s);break;case"gasMolecules":break;case"electricField":this.applyElectromagneticForces(t,s);break;default:this.applyGravity(t,s),0!==this.options.chargeStrength&&this.applyElectromagneticForces(t,s)}}applyCentralGravity(t,s){const i=this.particles.find((t=>t.isSun));if(!i||t.isFixed)return;const a=i.x-t.x,e=i.y-t.y,r=a*a+e*e,h=Math.sqrt(r),o=i.radius;if(i.eventHorizonRadius&&h<i.eventHorizonRadius){const r=10*(1-h/i.eventHorizonRadius),o=Math.atan2(e,a);t.vx+=Math.cos(o)*r*s,t.vy+=Math.sin(o)*r*s}if(h<o){const s=this.particles.indexOf(t);return void(s>-1&&this.particles.splice(s,1))}const n=2*this.options.gravitationalConstant*i.mass*t.mass/r,c=n*a/h/t.mass,l=n*e/h/t.mass;t.vx+=c*s,t.vy+=l*s}applyElectromagneticForces(t,s){if(t.isFixed)return;const i=this.grid.getNearbyParticles(t);for(const a of i){if(t===a)continue;const i=a.x-t.x,e=a.y-t.y,r=i*i+e*e,h=Math.sqrt(r);if(h<1)continue;const o=5e3*this.options.chargeStrength*t.charge*a.charge/r,n=o*i/h,c=o*e/h;t.vx+=n/t.mass*s,t.vy+=c/t.mass*s}}setSimulationType(t){switch(this.particles=[],this.grid.clear(),this.options.simulationType=t,t){case"solarSystem":const t=this.celestialPresets[this.options.celestialPreset||"default"],s=new Particle(this.canvas.width/2,this.canvas.height/2,0,0,t.radius,t.mass);s.isFixed=!0,s.isSun=!0,s.celestialType=this.options.celestialPreset,s.eventHorizonRadius=t.eventHorizonRadius,s.system=this,this.particles.push(s);const i=3*s.radius,a=[{distance:1.5*i,mass:1,radius:4,speed:2},{distance:2.5*i,mass:2,radius:6,speed:1.6},{distance:3.5*i,mass:4,radius:8,speed:1.3},{distance:4.5*i,mass:6,radius:10,speed:1}];for(let t=0;t<a.length;t++){const i=a[t],e=Math.random()*Math.PI*2,r=Math.sqrt(this.options.gravitationalConstant*s.mass/i.distance),h=new Particle(this.canvas.width/2+Math.cos(e)*i.distance,this.canvas.height/2+Math.sin(e)*i.distance,Math.sin(e)*r*i.speed,-Math.cos(e)*r*i.speed,i.radius,i.mass);this.particles.push(h)}break;case"gasMolecules":this.options.gravity=0;for(let t=0;t<100;t++)this.addParticle(Math.random()*this.canvas.width,Math.random()*this.canvas.height,400*(Math.random()-.5),400*(Math.random()-.5));break;case"electricField":const e=this.addParticle(.3*this.canvas.width,this.canvas.height/2,0,0);e.charge=1,e.mass=50,e.radius=15,e.isFixed=!0;const r=this.addParticle(.7*this.canvas.width,this.canvas.height/2,0,0);r.charge=-1,r.mass=50,r.radius=15,r.isFixed=!0;for(let t=0;t<20;t++){const t=this.addParticle(Math.random()*this.canvas.width,Math.random()*this.canvas.height,0,0);t.charge=Math.random()<.5?-1:1,t.mass=10,t.radius=5}break;default:this.options.gravity=500}}applyGravity(t,s){t.vy+=this.options.gravity*s}handleBoundaryCollisions(t){switch(this.options.boundaryType){case"solid":this.handleSolidBoundaries(t);break;case"wrap":this.handleWrapBoundaries(t);break;case"open":this.handleOpenBoundaries(t)}}handleCollisions(){for(let t=0;t<this.particles.length;t++){const s=this.particles[t];if(s.isFixed)continue;const i=this.grid.getNearbyParticles(s);for(let t of i){if(s===t)continue;const i=t.x-s.x,a=t.y-s.y,e=Math.sqrt(i*i+a*a);if(e<s.radius+t.radius)if(t.isFixed){const r=Math.atan2(a,i);s.x=t.x-Math.cos(r)*(s.radius+t.radius),s.y=t.y-Math.sin(r)*(s.radius+t.radius);const h=i/e,o=a/e,n=2*(s.vx*h+s.vy*o);s.vx-=n*h*this.options.elasticity,s.vy-=n*o*this.options.elasticity}else{const r=Math.atan2(a,i),h=Math.sin(r),o=Math.cos(r),n=s.vx*o+s.vy*h,c=s.vy*o-s.vx*h,l=t.vx*o+t.vy*h,d=t.vy*o-t.vx*h,p=this.options.elasticity;s.vx=l*p*o-c*h,s.vy=l*p*h+c*o,t.vx=n*p*o-d*h,t.vy=n*p*h+d*o;const u=(s.radius+t.radius-e)/2;t.isFixed||(t.x+=u*o,t.y+=u*h),s.x-=u*o,s.y-=u*h}}}}updateFPS(t){this.frameCount++;const s=t-this.lastFpsUpdate;s>=1e3&&(this.fps=Math.round(1e3*this.frameCount/s),this.frameCount=0,this.lastFpsUpdate=t)}update(t){t=Math.min(t,.016),this.grid.clear();const s=this.particles.find((t=>t.isSun));for(let i=this.particles.length-1;i>=0;i--){const a=this.particles[i];if(a.isEffect&&(a.lifetime--,a.lifetime<=0))this.particles.splice(i,1);else if(a.isFixed)this.grid.addParticle(a);else{if(!a.isEffect&&!a.isFixed&&s){const t=a.x-s.x,i=a.y-s.y;if(Math.sqrt(t*t+i*i)<=1.5*s.radius){this.handleCollision(a,s);continue}}if(!a.isSun){this.trajectoryPoints.has(a)||this.trajectoryPoints.set(a,[]);let t=this.trajectoryPoints.get(a);t.push({x:a.x,y:a.y}),t.length>this.maxTrajectoryPoints&&t.shift()}"solarSystem"===this.options.simulationType?this.applyCentralGravity(a,t):"electricField"===this.options.simulationType?this.applyElectromagneticForces(a,t):"gasMolecules"!==this.options.simulationType&&(a.vy+=this.options.gravity*t),a.update(t),this.handleBoundaryCollisions(a),this.grid.addParticle(a)}}for(let[t]of this.trajectoryPoints)this.particles.includes(t)||this.trajectoryPoints.delete(t);this.handleCollisions(),this.updateFPS(performance.now()),document.getElementById("particleCounter").textContent=this.particles.length}render(){this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height);const t=this.particles.find((t=>t.isSun));for(const s of this.particles)s.isSun||this.drawPredictedPath(s,t);for(const t of this.particles)t===this.hoveredParticle&&(this.ctx.beginPath(),this.ctx.arc(t.x,t.y,t.radius+3,0,2*Math.PI),this.ctx.strokeStyle="rgba(0, 0, 0, 0.5)",this.ctx.lineWidth=2,this.ctx.stroke()),t.draw(this.ctx);if(this.hoveredParticle&&t){const s=this.calculateTimeToImpact(this.hoveredParticle,t);this.ctx.font="bold 14px Arial",this.ctx.textAlign="center",this.ctx.textBaseline="bottom";const i=6,a=this.ctx.measureText(s).width+2*i,e=24,r=this.hoveredParticle.x,h=this.hoveredParticle.y-this.hoveredParticle.radius-15;this.ctx.fillStyle="rgba(0, 0, 0, 0.8)",this.ctx.beginPath(),this.ctx.roundRect(r-a/2,h-e,a,e,5),this.ctx.moveTo(r-8,h),this.ctx.lineTo(r+8,h),this.ctx.lineTo(r,h+8),this.ctx.closePath(),this.ctx.fill(),this.ctx.fillStyle="white",this.ctx.fillText(s,r,h-i)}}updatePhysicsOptions(t){Object.assign(this.options,t)}handleSolidBoundaries(t){t.y+t.radius>this.canvas.height&&(t.y=this.canvas.height-t.radius,t.vy=-t.vy*this.options.elasticity),t.y-t.radius<0&&(t.y=t.radius,t.vy=-t.vy*this.options.elasticity),t.x+t.radius>this.canvas.width&&(t.x=this.canvas.width-t.radius,t.vx=-t.vx*this.options.elasticity),t.x-t.radius<0&&(t.x=t.radius,t.vx=-t.vx*this.options.elasticity)}handleWrapBoundaries(t){t.x>this.canvas.width&&(t.x=0),t.x<0&&(t.x=this.canvas.width),t.y>this.canvas.height&&(t.y=0),t.y<0&&(t.y=this.canvas.height)}handleOpenBoundaries(t){if(t.x<-50||t.x>this.canvas.width+50||t.y<-50||t.y>this.canvas.height+50){const s=this.particles.indexOf(t);s>-1&&this.particles.splice(s,1)}}clearParticles(){this.particles=[],this.grid.clear(),"default"!==this.options.simulationType&&this.setSimulationType(this.options.simulationType)}createParticlesAtPoint(t,s){if("solarSystem"===this.options.simulationType)for(let i=0;i<this.particlesPerClick;i++){const a=20,e=2*Math.PI*i/this.particlesPerClick,r=2+4*Math.random(),h=r*r*(5+5*Math.random()),o=.8+.4*Math.random(),n=Math.cos(e)*a*o,c=Math.sin(e)*a*o,l=this.addParticle(t+n,s+c);l&&(l.radius=r,l.mass=h)}else for(let i=0;i<this.particlesPerClick;i++){const i=Math.random()*Math.PI*2,a=(.5*Math.random()+.5)*this.initialVelocity,e=Math.cos(i)*a,r=Math.sin(i)*a;this.addParticle(t+(20*Math.random()-10),s+(20*Math.random()-10),e,r)}}calculateTimeToImpact(t,s){const i=t.x-s.x,a=t.y-s.y,e=Math.sqrt(i*i+a*a);if(e<=1.5*s.radius)return"blackhole"===s.celestialType?"Being consumed by black hole":"Burning up in stellar surface";const r=t.vx,h=t.vy,o=Math.sqrt(r*r+h*h),n=(i*r+a*h)/e,c=Math.sqrt(o*o-n*n),l=Math.sqrt(2*this.options.gravitationalConstant*s.mass/e);if(o>l)return"Escape Trajectory";if(Math.abs(n)<.1&&c>.7*l&&c<.9*l)return"Stable Orbit";const d=-s.mass*this.options.gravitationalConstant/(o*o-2*this.options.gravitationalConstant*s.mass/e),p=2*Math.PI*Math.sqrt(Math.abs(d*d*d)/(this.options.gravitationalConstant*s.mass))*this.timeScale/this.options.orbitalSpeedMultiplier;return p<1?`Impact: ${Math.round(12*p)} months`:p<1e3?`Impact: ${Math.round(p)} years`:p<1e6?`Impact: ${(p/1e3).toFixed(1)}k years`:p<1e9?`Impact: ${(p/1e6).toFixed(1)}M years`:`Impact: ${(p/1e9).toFixed(1)}B years`}findHoveredParticle(){const t=this.particles.filter((t=>!t.isSun)).map((t=>{const s=this.mouseX-t.x,i=this.mouseY-t.y;return{particle:t,distance:Math.sqrt(s*s+i*i)}})).filter((({distance:t})=>t<15)).sort(((t,s)=>t.distance-s.distance));return t.length>0?t[0].particle:null}drawPredictedPath(t,s){if(!s)return;const i={x:t.x,y:t.y,vx:t.vx,vy:t.vy,mass:t.mass};let a=[],e=0;const r=t.x,h=t.y,o=t.x-s.x,n=t.y-s.y,c=Math.sqrt(o*o+n*n),l=Math.sqrt(t.vx*t.vx+t.vy*t.vy),d=this.options.gravitationalConstant,p=.5*l*l-d*s.mass/c>0;for(;e<2e3;){if(a.push({x:i.x,y:i.y}),e>50){if(Math.sqrt(Math.pow(i.x-r,2)+Math.pow(i.y-h,2))<5&&!p)break}const t=s.x-i.x,o=s.y-i.y,n=t*t+o*o,c=Math.sqrt(n);if(c<s.radius)break;const l=d*s.mass*i.mass/n,u=l*t/c/i.mass,y=l*o/c/i.mass,x=.01;if(i.vx+=u*x,i.vy+=y*x,i.x+=i.vx*x,i.y+=i.vy*x,e++,p&&e>200)break}if(a.length>2){this.ctx.beginPath(),this.ctx.moveTo(a[0].x,a[0].y);for(let t=1;t<a.length-2;t++){const s=(a[t].x+a[t+1].x)/2,i=(a[t].y+a[t+1].y)/2;this.ctx.quadraticCurveTo(a[t].x,a[t].y,s,i)}!p&&a.length>2&&this.ctx.lineTo(a[0].x,a[0].y),this.ctx.strokeStyle=p?"rgba(255, 0, 0, 0.3)":"rgba(0, 255, 0, 0.3)",this.ctx.lineWidth=1.5,this.ctx.stroke()}}handleCollision(t,s){const i=this.particles.indexOf(t);if(i>-1)switch(this.particles.splice(i,1),s.celestialType){case"blackhole":this.createBlackHoleEffect(t,s);break;case"default":case"supergiant":this.createSolarFlareEffect(t,s);break;case"neutron":this.createNeutronEffect(t,s);break;case"dwarf":this.createDwarfEffect(t,s)}}createBlackHoleEffect(t,s){for(let i=0;i<10;i++){Math.atan2(t.y-s.y,t.x-s.x),Math.PI,Math.sqrt(Math.pow(t.x-s.x,2)+Math.pow(t.y-s.y,2));const i=new Particle(t.x,t.y,.5*t.vx,.5*t.vy,.5*t.radius,.2*t.mass);i.isEffect=!0,i.lifetime=30,this.particles.push(i)}}createSolarFlareEffect(t,s){for(let s=0;s<8;s++){const i=2*Math.PI*s/8,a=new Particle(t.x,t.y,2*Math.cos(i),2*Math.sin(i),.7*t.radius,.1*t.mass);a.isEffect=!0,a.lifetime=20,a.color="#FFD700",this.particles.push(a)}}createNeutronEffect(t,s){for(let i=0;i<10;i++){Math.atan2(t.y-s.y,t.x-s.x),Math.PI,Math.sqrt(Math.pow(t.x-s.x,2)+Math.pow(t.y-s.y,2));const i=new Particle(t.x,t.y,.5*t.vx,.5*t.vy,.5*t.radius,.2*t.mass);i.isEffect=!0,i.lifetime=30,this.particles.push(i)}}createDwarfEffect(t,s){for(let i=0;i<10;i++){Math.atan2(t.y-s.y,t.x-s.x),Math.PI,Math.sqrt(Math.pow(t.x-s.x,2)+Math.pow(t.y-s.y,2));const i=new Particle(t.x,t.y,.5*t.vx,.5*t.vy,.5*t.radius,.2*t.mass);i.isEffect=!0,i.lifetime=30,this.particles.push(i)}}draw(t){this.isEffect&&(t.globalAlpha=this.lifetime/30,this.color&&(t.fillStyle=this.color)),t.globalAlpha=1}updateSunProperties(){const t=this.particles.find((t=>t.isSun));t&&(t.radius=this.options.sunRadius,t.mass=this.options.sunMass)}}
